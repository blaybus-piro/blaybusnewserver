name: blaybus CI/CD

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # (1) 깃 체크아웃
      - name: Check out repository
        uses: actions/checkout@v2

      # (2) ENV 파일 생성
      - name: Create env/prod.env file
        run: |
          mkdir -p env
          echo "${{ secrets.ENV_VARS }}" > env/dev.env

      # (3) JDK 17 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'   # (중요) distribution 지정
          java-version: '17'

      # (4) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # (5) Gradle 빌드 (테스트 스킵)
      - name: Build with Gradle (skip tests)
        run: ./gradlew clean build -x test

      # (6) Docker 이미지 빌드
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest .

      # (7) DockerHub 로그인
      - name: DockerHub Login
        run: |
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # (8) Docker 이미지 푸시
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

      # (9) SSH로 서버 접속 후 컨테이너 실행
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 이미 돌아가는 컨테이너가 있다면 중단/제거
            docker stop ${{ secrets.DOCKERHUB_REPO_NAME }} || true
            docker rm ${{ secrets.DOCKERHUB_REPO_NAME }} || true

            # 최신 이미지 pull
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest

            # 새 컨테이너 실행 (메모리/CPU, 재시작, ENV 등)
            docker run -d \
              --name ${{ secrets.DOCKERHUB_REPO_NAME }} \
              -p 8080:8080 \
              -e - name: Run Spring Boot Container with Production Profile
              -e SPRING_PROFILES_ACTIVE=prod \
              --cpus="1.0" \
              --memory="512m" \
              --memory-swap="1g" \
              --restart=always \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPO_NAME }}:latest